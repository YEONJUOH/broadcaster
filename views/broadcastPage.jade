doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Title
        style.
            video {
                width:100%;
            }
            html,body{
                height: 100%;
            }
            .context{
                background-color: #ffffff;
                padding:4px;
                font-size: 15px;
                border-radius:8px;
            }
            .con_div{
                margin-top: 7px;
                margin-left: 5px;
                font-size :10px;
            }

            ul {
                list-style: none;
                margin: 0;
                padding: 0;
                padding-left:10px;
                height: 100%;
            }

            li {
                margin: 0 0 0 0;
                margin-right:7px;
                padding: 0 0 0 0;
                border: 0;
                width:32%;
                height: 100%;
                float: left;
            }

        link(rel='stylesheet', type='text/css', href='/stylesheets/bootstrap.min.css')
        script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
        script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')
    body
        .bs-component
            nav.navbar.navbar-default
                .container-fluid
                    .navbar-header
                        button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#bs-example-navbar-collapse-1')
                            span.sr-only Toggle navigation
                            span.icon-bar
                            span.icon-bar
                            span.icon-bar
                        a.navbar-brand(href='#') NursNars
            div(style='width:90%;margin:0 auto;padding-top:7px;')
                div(style='width:70%;margin-right:0px;float:left')
                    #videos-container(style='width:100%;margin-right:0px')
                    div(style='background:#ffffff;padding:5px;')
                        h3 #{broadcast.b_name}
                        div
                            span #{broadcast.product_nm}
                            span(style="padding-left:8px;") #{broadcast.low_price}
                        input#broadcast-id(type='hidden', placeholder='broadcast-id', value='#{broadcast.b_id}')
                        input#m_id(type='hidden', placeholder='broadcast-id', value='#{member.m_id}')
                     div(style='width:100%;margin-right:0px;margin-top:10px;padding:5px;float:left;height:200px;background-color:#ffffff')
                         h3 맞춤 추천
                         ul
                             li
                               img(src="/images/video.png" style='width:100%;height:50%')
                               div(style="text-align:center") 방송1
                             li
                               img(src="/images/video.png" style='width:100%;height:50%')
                               div(style="text-align:center") 방송2
                             li
                               img(src="/images/video.png" style='width:100%;height:50%')
                               div(style="text-align:center") 방송3
                div(style='width:30%;height100%;float:left;')
                    div(style='width:95%;height:600px;margin:0 auto;background:#ffffff;padding-top:5px;')
                        h4(style='width:95%;margin:0 auto;background:#666666;color:#ffffff;text-align:center;padding:4px;') 입찰 희망
                        div#highPrice(style='text-align:center;width:95%;margin:10px auto;border-bottom:1px solid') 입찰 희망 내역이 없습니다.
                        .chat-output(style='width:95%;margin:10px auto;height:450px;background:#d9d9d9')
                        div(style='width:95%;margin:0 auto;')
                            button(style='float:right') 입력
                            .stretcher(style='overflow:hidden')
                                input#input-text-chat(type='text', style='width:100%')
                        div(style='width:95%;margin:5px auto;')
                            button(type='button', data-toggle='modal', data-target='#bidModal', style='width:100%;') 입찰하기
        // Modal
        #bidModal.modal.fade(role='dialog')
            .modal-dialog
                // Modal content
                .modal-content
                    .modal-header
                        button.close(type='button', data-dismiss='modal') ×
                        h4.modal-title 입찰 하기
                    .modal-body
                        input#price(type='text',class="form-control" , style='width:50%;margin-left:25%')
                    .modal-footer(style="text-align:center")
                        button#bidding-button(type='button',class="btn btn-default" ,data-dismiss='modal') 입찰하기
    script(src='/socket.io/socket.io.js')
    script(src='/javascripts/RTCMultiConnection.js')
    script.
        var socket = io.connect();
        // using single socket for RTCMultiConnection signaling
        //script for chat connection
        var chatConnection = new RTCMultiConnection();
        chatConnection.socketURL ='/';
        chatConnection.socketMessageEvent = 'textchat-plus-fileshare-demo';
        chatConnection.session = {
            data: true
        };
        chatConnection.sdpConstraints.mandatory = {
            OfferToReceiveAudio: false,
            OfferToReceiveVideo: false
        };
        chatConnection.onmessage = chatOnMsg;
        var m_id = document.getElementById('m_id').value;
        document.getElementById('input-text-chat').onkeyup = function(e) {
            if (e.keyCode != 13) return;
            // removing trailing/leading whitespace
            this.value = this.value.replace(/^\\\s+|\s+$/g, '');
            if (!this.value.length) return;
            chatConnection.send({type:"chat",content : this.value,sender:m_id});
            appendDIV(this.value);
            this.value = '';
        };
        var chatContainer = document.querySelector('.chat-output');

        function appendDIV(event) {
            var att1 = document.createAttribute("class");// Create a "class" attribute
            var att2 = document.createAttribute("class");// Create a "class" attribute
            var div_con = document.createElement('div');
            att1.value ="con_div";
            div_con.setAttributeNode(att1);
            var div_nm  = document.createElement('div');
            div_nm.innerHTML=m_id;
            div_con.appendChild(div_nm);
            var span = document.createElement('span');
            att2.value = "context";
            span.setAttributeNode(att2);
            div_con.appendChild(span);
            span.innerHTML = event.data || event;
            //chatContainer.insertChildAfter(div, chatContainer.firstChild);
            chatContainer.appendChild(div_con);
            div_con.tabIndex = 0;
            div_con.focus();
            document.getElementById('input-text-chat').focus();
        }
        function chatOnMsg(event) {
            console.log(event.data.type);
            if(event.data.type == "chat") {
                var att1 = document.createAttribute("class");// Create a "class" attribute
                var att2 = document.createAttribute("class");// Create a "class" attribute
                var div_con = document.createElement('div');
                att1.value = "con_div";
                div_con.setAttributeNode(att1);
                var div_nm = document.createElement('div');
                div_nm.innerHTML = event.data.sender;
                div_con.appendChild(div_nm);
                var span = document.createElement('span');
                att2.value = "context";
                span.setAttributeNode(att2);
                div_con.appendChild(span);
                span.innerHTML = event.data.content || event;
                //chatContainer.insertChildAfter(div, chatContainer.firstChild);
                chatContainer.appendChild(div_con);
                div_con.tabIndex = 0;
                div_con.focus();
                document.getElementById('input-text-chat').focus();
            }

            if(event.data.type=="price"){

                $('#highPrice').text(event.data.m_id+"님 "+ event.data.content+"원" );
            }
        }
        var onMessageCallbacks = {};
        socket.on('message', function(data) {
            if (data.sender == connection.userid) return;
            if (onMessageCallbacks[data.channel]) {
                console.log("채널 확인"+data.channel);
                onMessageCallbacks[data.channel](data.message);
            };
        });
        // initializing RTCMultiConnection constructor.
        function initRTCMultiConnection(userid) {
            var connection = new RTCMultiConnection();
            connection.body = document.getElementById('videos-container');
            connection.channel = connection.sessionid = connection.userid = userid || connection.userid;
            connection.sdpConstraints.mandatory = {
                OfferToReceiveAudio: false,
                OfferToReceiveVideo: true
            };
            // using socket.io for signaling
            connection.openSignalingChannel = function(config) {
                var channel = config.channel || this.channel;
                onMessageCallbacks[channel] = config.onmessage;
                if (config.onopen) setTimeout(config.onopen, 1000);
                return {
                    send: function(message) {

                        socket.emit('message', {
                            sender: connection.userid,
                            channel: channel,
                            message: message
                        });
                    },
                    channel: channel
                };
            };
            connection.onMediaError = function(error) {
                alert(JSON.stringify(error));
            };
            return connection;
        }
        // this RTCMultiConnection object is used to connect with existing users
        var connection = initRTCMultiConnection();
        connection.getExternalIceServers = false;
        connection.onstream = function(event) {
            connection.body.appendChild(event.mediaElement);
            if (connection.isInitiator == false && !connection.broadcastingConnection) {
                // "connection.broadcastingConnection" global-level object is used
                // instead of using a closure object, i.e. "privateConnection"
                // because sometimes out of browser-specific bugs, browser
                // can emit "onaddstream" event even if remote user didn't attach any stream.
                // such bugs happen often in chrome.
                // "connection.broadcastingConnection" prevents multiple initializations.
                // if current user is broadcast viewer
                // he should create a separate RTCMultiConnection object as well.
                // because node.js server can allot him other viewers for
                // remote-stream-broadcasting.
                connection.broadcastingConnection = initRTCMultiConnection(connection.userid);
                // to fix unexpected chrome/firefox bugs out of sendrecv/sendonly/etc. issues.
                connection.broadcastingConnection.onstream = function() {};
                connection.broadcastingConnection.session = connection.session;
                connection.broadcastingConnection.attachStreams.push(event.stream); // broadcast remote stream
                connection.broadcastingConnection.dontCaptureUserMedia = true;
                // forwarder should always use this!
                connection.broadcastingConnection.sdpConstraints.mandatory = {
                    OfferToReceiveVideo: false,
                    OfferToReceiveAudio: false
                };
                connection.broadcastingConnection.open({
                    dontTransmit: true
                });
            }
        };
        // ask node.js server to look for a broadcast
        // if broadcast is available, simply join it. i.e. "join-broadcaster" event should be emitted.
        // if broadcast is absent, simply create it. i.e. "start-broadcasting" event should be fired.
        /*document.getElementById('open-or-join').onclick = function() {
         var broadcastid = document.getElementById('broadcast-id').value;
         if (broadcastid.replace(/^\\\\\\s+|\s+$/g, '').length <= 0) {
         alert('Please enter broadcast-id');
         document.getElementById('broadcast-id').focus();
         return;
         }
         this.disabled = true;
         connection.session = {
         video: 'Audio+Video',
         //video: document.getElementById('broadcast-options').value.indexOf('Video') !== -1,
         //screen: document.getElementById('broadcast-options').value.indexOf('Screen') !== -1,
         //audio: document.getElementById('broadcast-options').value.indexOf('Audio') !== -1,
         oneway: true
         };
         socket.emit('join-broadcast', {
         broadcastid: broadcastid,
         userid: connection.userid,
         typeOfStreams: connection.session
         });
         };
         */
        var broadcastid = document.getElementById('broadcast-id').value;

        var start = function() {

            if (broadcastid.replace(/^\\\\\\s+|\s+$/g, '').length <= 0) {
                alert('Please enter broadcast-id');
                document.getElementById('broadcast-id').focus();
                return;
            }
            this.disabled = true;
            connection.session = {
                video: 'Audio+Video',
                //video: document.getElementById('broadcast-options').value.indexOf('Video') !== -1,
                //screen: document.getElementById('broadcast-options').value.indexOf('Screen') !== -1,
                //audio: document.getElementById('broadcast-options').value.indexOf('Audio') !== -1,
                oneway: true
            };
            socket.emit('join-broadcast', {
                broadcastid: broadcastid,
                userid: connection.userid,
                typeOfStreams: connection.session
            });
        };
        window.onload = function () {
            start();
        }
        // this event is emitted when a broadcast is already created.
        socket.on('join-broadcaster', function(broadcaster, typeOfStreams) {
            connection.session = typeOfStreams;
            connection.channel = connection.sessionid = broadcaster.userid;
            connection.sdpConstraints.mandatory = {
                OfferToReceiveVideo: !!connection.session.video,
                OfferToReceiveAudio: !!connection.session.audio
            };
            chatConnection.join(broadcastid+"chat");
            connection.join({
                sessionid: broadcaster.userid,
                userid: broadcaster.userid,
                extra: {},
                session: connection.session
            });
        });
        // this event is emitted when a broadcast is absent.
        socket.on('start-broadcasting', function(typeOfStreams) {
            // host i.e. sender should always use this!
            connection.sdpConstraints.mandatory = {
                OfferToReceiveVideo: false,
                OfferToReceiveAudio: false
            };
            //chat room open
            chatConnection.open(broadcastid +"chat");
            connection.session = typeOfStreams;
            connection.open({
                dontTransmit: true
            });
            if (connection.broadcastingConnection) {
                // if new person is given the initiation/host/moderation control
                connection.broadcastingConnection.close();
                connection.broadcastingConnection = null;
            }
        });
        window.onbeforeunload = function() {
            // Firefox is weird!
            document.getElementById('open-or-join').disabled = false;
        };
        //입찰하기 버튼 클릭 시
        document.getElementById('bidding-button').onclick=function () {
            var price = document.getElementById('price').value;
            socket.emit("bid",{broadcastid : broadcastid,price:price});
            $('#bidModal').modal('hide')
        };

        socket.on("answer",function (data) {
            if(data=="ok") {
                var price = document.getElementById('price').value;
                chatConnection.send({type: "price", content: price,m_id:m_id});
                changePrice(price);
            }else{
                alert("가격이 작습니다.");
            }
        });

        function changePrice(data){

            $('#highPrice').text(m_id+"님 "+  data+"원");

        }